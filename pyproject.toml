[project]
name = "up-skill"
version = "0.1.0"
description = "Learning to solve problems, data structures and algorithms."
license = { file = "LICENSE" }
authors = [{ name = "Prabhu K H", email = "25prabhu10@gmail.com" }]
maintainers = [{ name = "Prabhu K H", email = "25prabhu10@gmail.com" }]
readme = "README.md"
requires-python = ">=3.13"
keywords = ["algorithms", "data structures", "leetcode"]
classifiers = [
  # How mature is this project? Common values are
  #   3 - Alpha
  #   4 - Beta
  #   5 - Production/Stable
  "Development Status :: 3 - Alpha",
  "Environment :: Console",

  # Indicate who your project is intended for
  "Intended Audience :: End Users/Desktop",
  "Operating System :: OS Independent",

  # Categories of the project
  "Topic :: Education",
  "Topic :: Utilities",
  "Topic :: Software Development :: Libraries :: Python Modules",

  # Pick your license as you wish
  "License :: OSI Approved :: MIT License",

  # Specify the Python versions you support here
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: 3.14",
  "Programming Language :: Python :: 3.15",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = []

[dependency-groups]
dev = ["pytest>=8.4.2", "ruff>=0.13.3", "ty>=0.0.1a21"]

[build-system]
requires = ["uv_build>=0.8.22,<0.9.0"]
build-backend = "uv_build"

[tool.uv.build-backend]
module-root = ""
source-exclude = ["tests/**"]
# module-name = ["algorithms.sort"]
namespace = true

[project.urls]
Homepage = "https://github.com/25prabhu10/up-skill"
Documentation = "https://github.com/25prabhu10/up-skill/blob/main/README.md"
Repository = "https://github.com/25prabhu10/up-skill.git"
Issues = "https://github.com/25prabhu10/up-skill/issues"

[tool.ruff]
target-version = "py313"

[tool.ruff.format]
preview = true

[tool.ruff.lint]
preview = true
select = [
  "A",     # Flake8-builtins – misuse of Python built-in names
  "ANN",   # Flake8-annotations – enforces type annotation style
  "ARG",   # Flake8-unused-arguments – flags unused function arguments
  "ASYNC", # Flake8-async – checks async/await usage
  "B",     # Flake8-bugbear – common bug patterns
  "BLE",   # Flake8-blind-except – flags bare excepts
  "C4",    # Flake8-comprehensions – best practices in comprehensions
  "C90",   # McCabe – complexity metric for functions
  "DTZ",   # Flake8-datetimez – requires timezone-aware datetime objects
  "E",     # Pycodestyle errors (style issues)
  "EM",    # Flake8-errmsg – error message style
  "F",     # Pyflakes errors (logical errors)
  "FA",    # Flake8-future-annotations – future import for annotations
  "FBT",   # Flake8-boolean-trap – potential pitfalls with booleans
  "FIX",   # Flake8-fixme – flags FIXME comments
  "FLY",   # Flynt – f-string conversion suggestions
  "G",     # Flake8-logging-format – logging format string issues
  "I",     # isort – import ordering checks
  "ICN",   # Flake8-import-conventions – enforces conventional import aliases
  "INP",   # Flake8-no-pep420 – warns against non-PEP420 namespace usage
  "INT",   # Flake8-gettext – checks for proper internationalization usage
  "ISC",   # Flake8-implicit-str-concat – warns on implicit string concatenation
  "LOG",   # Flake8-logging – proper logging usage
  "N",     # PEP8 Naming – naming conventions
  "PERF",  # Perflint – performance-related checks
  "PIE",   # Flake8-pie – Python improvement suggestions
  "PLC",   # Pylint-Conventions – Pylint convention checks
  "PLE",   # Pylint-Errors – Pylint error codes
  "PLR",   # Pylint-Refactor – refactoring suggestions
  "PLW",   # Pylint-Warning
  "PT",    # Flake8-pytest-style – pytest best practices
  "PTH",   # Flake8-use-pathlib – encourages pathlib over os.path
  "PYI",   # Flake8-pyi – checks for type stub (.pyi) consistency
  "Q",     # Flake8-quotes – enforces quote style consistency
  "RET",   # Flake8-return – return statement issues
  "RSE",   # Flake8-raise – proper raise statement usage
  "RUF",   # Ruff-specific rules – additional Ruff checks
  "S",     # Flake8-bandit – security issues
  "SIM",   # Flake8-simplify – code simplification hints
  "SLF",   # Flake8-self – flags instance methods that don't use self
  "SLOT",  # Flake8-slots – suggests use of __slots__ where appropriate
  "T10",   # Flake8-debugger – debugger statements (e.g. pdb)
  "TC",    # Flake8-type-checking – proper import of typing in type checks
  "TD",    # Flake8-todos – flags TODO comments
  "TID",   # Flake8-tidy-imports – enforces specific import styles (e.g., no relative imports)
  "TRY",   # Tryceratops – try/except usage suggestions
  "UP",    # Pyupgrade – upgrades syntax to newer Python versions
  "W",     # Pycodestyle warnings (style issues)
  "YTT",   # Flake8-2020 – checks for Python 2020 best practices
  # "COM",  # Flake8-commas – trailing/comma issues
  # "CPY",  # Flake8-copyright – copyright header checks
  # "D",    # Pydocstyle – docstring formatting
  # "DOC",  # Pydoclint – docstring linting and consistency
]
ignore = [
  "D203",   # Pydocstyle - one blank line required before class docstring
  "D205",   # Pydocstyle - one blank line required after class docstring
  "D212",   # Pydocstyle - summary line should be immediately after the opening quotes
  "D401",   # Pydocstyle - Checks for docstring first lines that are not in imperative mood
  "FBT001", # Boolean trap - positional boolean argument
  "FBT002", # Boolean trap - boolean default argument
  "INP001", # implicit-namespace-package
  "S101",   # Flake8-bandit - use of assert detected
  "TD002",  # Flake8-todos - Author name
  "TD003",  # Flake8-todos - Missing issue link
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]

[tool.ty.src]
include = ["src", "tests"]

[tool.ty.environment]
python = "./.venv"

[tool.pytest.ini_options]
testpaths = ["tests"]
